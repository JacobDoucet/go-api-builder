package {{ .Pkg }} {{ $name := .Name }}

import (
	"context"
    _ "embed"
	"encoding/json"
    "fmt"
    "eflux-go-cassandra/generated/model"
    "github.com/gocql/gocql"
	"golang.org/x/sync/errgroup"
)

{{- range .TreeNode.Tables}}
//go:embed scripts/create_{{ .Name | sc }}.cql
var create{{ .Name | tc }}Script string
{{- end}}

{{- range .TreeNode.Tables}}
func CreateTable{{ .Name | tc }}(session *gocql.Session) error {
    return session.Query(create{{ .Name | tc }}Script).Exec()
}
{{- end }}

type By{{ $name | tc }} struct {
    {{ .Name | tc }} model.{{ .Name | tc }} `json:"{{ .Name }}"`
    {{- range .TreeNode.Peers }}
    {{ . | tc }} *model.{{ . | tc }}  `json:"{{ . }},omitempty"`
    {{- end }}
    {{- range .TreeNode.Children }}
    {{ . | tc }}s []model.{{ . | tc }} `json:"{{ . }}s"`
    {{- end }}
}

func Save{{ $name | tc }}(ctx context.Context, session *gocql.Session, {{ $name }} model.{{ .Name | tc }}) error {
    g, ctx := errgroup.WithContext(ctx)
    {{- range .TreeNode.Tables}}
    g.Go(func() error {
        // TODO
        return nil
    })
    {{- end}}
    if err := g.Wait(); err != nil {
        return err
    }
    return nil
}

func get{{ $name | tc }}InsertStatement({{ $name }} model.{{ $name | tc }}) (string, error) {
    jsonData, err := json.Marshal({{ $name }})
    if err != nil {
        return "", err
    }
    return fmt.Sprintf("INSERT INTO {{ $name | sc }} JSON '%s';", string(jsonData)), nil
}
